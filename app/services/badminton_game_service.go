// Code generated by gen.go. DO NOT EDIT.
// ⚠️ 本文件为服务层模板，禁止直接修改任何生成器生成的文件！
// 如需调整，请修改本模板，并通过 go run utils/gen/gen.go -table=表名 -cmd=s 等命令重新生成覆盖。

package services

import (
	"gin-go-test/app/models"
	"gorm.io/gorm"
)

// BadmintonGameService 处理BadmintonGame相关的业务逻辑
type BadmintonGameService struct {
	db *gorm.DB
}

// NewBadmintonGameService 创建新的BadmintonGameService实例
func NewBadmintonGameService(db *gorm.DB) *BadmintonGameService {
	return &BadmintonGameService{db: db}
}

// GetCount 获取记录总数
func (s *BadmintonGameService) GetCount() (int64, error) {
	var count int64
	err := s.db.Model(&models.BadmintonGame{}).Count(&count).Error
	return count, err
}

// List 获取记录列表
func (s *BadmintonGameService) List(page, pageSize int) ([]models.BadmintonGame, error) {
	var items []models.BadmintonGame
	err := s.db.Offset((page - 1) * pageSize).Limit(pageSize).Find(&items).Error
	return items, err
}

// BatchCreate 批量创建记录
func (s *BadmintonGameService) BatchCreate(items []models.BadmintonGame) ([]models.BadmintonGame, []error) {
	var errs []error
	var createdItems []models.BadmintonGame

	for _, item := range items {
		if err := s.db.Create(&item).Error; err != nil {
			errs = append(errs, err)
		} else {
			createdItems = append(createdItems, item)
		}
	}

	return createdItems, errs
}

// BatchUpdate 批量更新记录
func (s *BadmintonGameService) BatchUpdate(items []models.BadmintonGame) error {
	for _, item := range items {
		// 构造更新 map,只放请求体中出现的字段
		updateMap := make(map[string]interface{})

		// 如果字段在请求体中出现,就加入更新 map
		// 注意:即使值是 ""、0、null,也要更新
		if item.Id != nil {
			updateMap["id"] = *item.Id
		}
		if item.Player1 != nil {
			updateMap["player1"] = *item.Player1
		}
		if item.Player2 != nil {
			updateMap["player2"] = *item.Player2
		}
		if item.Score1 != nil {
			updateMap["score1"] = *item.Score1
		}
		if item.Score2 != nil {
			updateMap["score2"] = *item.Score2
		}
		if item.Location != nil {
			updateMap["location"] = *item.Location
		}
		if item.MatchTime != nil {
			updateMap["match_time"] = *item.MatchTime
		}

		// 执行更新
		if len(updateMap) > 0 {
			if err := s.db.Model(&models.BadmintonGame{}).Where("id = ?", *item.Id).Updates(updateMap).Error; err != nil {
				return err
			}
		}
	}
	return nil
}

// BatchDelete 批量删除记录
func (s *BadmintonGameService) BatchDelete(ids []uint) []error {
	var errs []error

	for _, id := range ids {
		if err := s.db.Delete(&models.BadmintonGame{}, id).Error; err != nil {
			errs = append(errs, err)
		}
	}

	return errs
}

func (s *BadmintonGameService) GetDB() *gorm.DB {
	return s.db
}
