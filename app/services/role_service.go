// Code generated by gen.go. DO NOT EDIT.
package services

import (
	"gin-go-test/app/models"
	"gorm.io/gorm"
)

// RoleService 处理Role相关的业务逻辑
type RoleService struct {
	db *gorm.DB
}

// NewRoleService 创建新的RoleService实例
func NewRoleService(db *gorm.DB) *RoleService {
	return &RoleService{db: db}
}

// GetCount 获取记录总数
func (s *RoleService) GetCount() (int64, error) {
	var count int64
	err := s.db.Model(&models.Role{}).Count(&count).Error
	return count, err
}

// List 获取记录列表
func (s *RoleService) List(page, pageSize int) ([]models.Role, error) {
	var items []models.Role
	err := s.db.Offset((page - 1) * pageSize).Limit(pageSize).Find(&items).Error
	return items, err
}

// BatchCreate 批量创建记录
func (s *RoleService) BatchCreate(items []models.Role) ([]models.Role, []error) {
	var errs []error
	var createdItems []models.Role

	for _, item := range items {
		if err := s.db.Create(&item).Error; err != nil {
			errs = append(errs, err)
		} else {
			createdItems = append(createdItems, item)
		}
	}

	return createdItems, errs
}

// BatchUpdate 批量更新记录
func (s *RoleService) BatchUpdate(items []models.Role) ([]models.Role, []error) {
	var errs []error
	var updatedItems []models.Role

	for _, item := range items {
		var old models.Role
		if err := s.db.First(&old, item.Id).Error; err != nil {
			errs = append(errs, err)
			continue
		}
		// 构建只包含有值字段的 map
		updateMap := make(map[string]interface{})
		// TODO: 这里需根据你的字段类型和业务调整，以下为示例
		// if item.Name != "" { updateMap["name"] = item.Name }
		// if item.Age != 0 { updateMap["age"] = item.Age }
		// ...
		// 你可以用反射自动处理，或手动列出所有字段

		// 示例：假设有 Name、Age 字段
		// if item.Name != "" { updateMap["name"] = item.Name }
		// if item.Age != 0 { updateMap["age"] = item.Age }

		if len(updateMap) == 0 {
			updatedItems = append(updatedItems, old)
			continue
		}
		if err := s.db.Model(&old).Updates(updateMap).Error; err != nil {
			errs = append(errs, err)
		} else {
			// 更新后重新查一遍
			s.db.First(&old, item.Id)
			updatedItems = append(updatedItems, old)
		}
	}

	return updatedItems, errs
}

// BatchDelete 批量删除记录
func (s *RoleService) BatchDelete(ids []uint) []error {
	var errs []error

	for _, id := range ids {
		if err := s.db.Delete(&models.Role{}, id).Error; err != nil {
			errs = append(errs, err)
		}
	}

	return errs
}

func (s *RoleService) GetDB() *gorm.DB {
	return s.db
}