// Code generated by gen.go. DO NOT EDIT.
package services

import (
	"gin-go-test/app/models"
	"gin-go-test/utils"
	"gorm.io/gorm"
)

// AdminService 处理管理员相关的业务逻辑
type AdminService struct {
	db *gorm.DB
}

// NewAdminService 创建新的AdminService实例
func NewAdminService(db *gorm.DB) *AdminService {
	return &AdminService{db: db}
}

// GetAdminByUsername 根据用户名获取管理员信息
func (s *AdminService) GetAdminByUsername(username string) (*models.Admin, error) {
	var admin models.Admin
	err := s.db.Where("username = ?", username).First(&admin).Error
	if err != nil {
		return nil, err
	}
	return &admin, nil
}

// GetAllAdmins 获取所有管理员
func (s *AdminService) GetAllAdmins() ([]models.Admin, error) {
	var admins []models.Admin
	err := s.db.Find(&admins).Error
	return admins, err
}

// UpdateAdminPassword 更新管理员密码
func (s *AdminService) UpdateAdminPassword(id uint, newPassword string) error {
	hashedPassword, err := utils.HashPassword(newPassword)
	if err != nil {
		return err
	}
	return s.db.Model(&models.Admin{}).Where("id = ?", id).Update("password", hashedPassword).Error
}

// UpdateOwnPassword 更新自己的密码
func (s *AdminService) UpdateOwnPassword(id uint, oldPassword, newPassword string) error {
	var admin models.Admin
	if err := s.db.First(&admin, id).Error; err != nil {
		return err
	}

	if !utils.CheckPassword(oldPassword, admin.Password) {
		return utils.ErrInvalidPassword
	}

	hashedPassword, err := utils.HashPassword(newPassword)
	if err != nil {
		return err
	}

	return s.db.Model(&admin).Update("password", hashedPassword).Error
}

// GetJWTInfo 从JWT token中获取管理员信息
func (s *AdminService) GetJWTInfo(token string) (*models.Admin, error) {
	claims, err := utils.ParseJWT(token)
	if err != nil {
		return nil, err
	}

	var admin models.Admin
	if err := s.db.First(&admin, claims["admin_id"]).Error; err != nil {
		return nil, err
	}

	return &admin, nil
}

// GetCount 获取记录总数
func (s *AdminService) GetCount() (int64, error) {
	var count int64
	err := s.db.Model(&models.Admin{}).Count(&count).Error
	return count, err
}

// List 获取记录列表
func (s *AdminService) List(page, pageSize int) ([]models.Admin, error) {
	var items []models.Admin
	err := s.db.Offset((page - 1) * pageSize).Limit(pageSize).Find(&items).Error
	return items, err
}

// BatchCreate 批量创建记录
func (s *AdminService) BatchCreate(items []models.Admin) ([]models.Admin, []error) {
	var errs []error
	var createdItems []models.Admin

	for _, item := range items {
		if err := s.db.Create(&item).Error; err != nil {
			errs = append(errs, err)
		} else {
			createdItems = append(createdItems, item)
		}
	}

	return createdItems, errs
}

// BatchUpdate 批量更新记录
func (s *AdminService) BatchUpdate(items []models.Admin) ([]models.Admin, []error) {
	var errs []error
	var updatedItems []models.Admin

	for _, item := range items {
		if err := s.db.Save(&item).Error; err != nil {
			errs = append(errs, err)
		} else {
			updatedItems = append(updatedItems, item)
		}
	}

	return updatedItems, errs
}

// BatchDelete 批量删除记录
func (s *AdminService) BatchDelete(ids []uint) []error {
	var errs []error

	for _, id := range ids {
		if err := s.db.Delete(&models.Admin{}, id).Error; err != nil {
			errs = append(errs, err)
		}
	}

	return errs
}

func (s *AdminService) GetDB() *gorm.DB {
	return s.db
}