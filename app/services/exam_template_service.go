// Code generated by gen.go. DO NOT EDIT.
// ⚠️ 本文件为服务层模板，禁止直接修改任何生成器生成的文件！
// 如需调整，请修改本模板，并通过 go run utils/gen/gen.go -table=表名 -cmd=s 等命令重新生成覆盖。

package services

import (
	"gin-go-test/app/models"
	"gorm.io/gorm"
)

// ExamTemplateService 处理ExamTemplate相关的业务逻辑
type ExamTemplateService struct {
	db *gorm.DB
}

// NewExamTemplateService 创建新的ExamTemplateService实例
func NewExamTemplateService(db *gorm.DB) *ExamTemplateService {
	return &ExamTemplateService{db: db}
}

// GetCount 获取记录总数
func (s *ExamTemplateService) GetCount() (int64, error) {
	var count int64
	err := s.db.Model(&models.ExamTemplate{}).Count(&count).Error
	return count, err
}

// List 获取记录列表
func (s *ExamTemplateService) List(page, pageSize int) ([]models.ExamTemplate, error) {
	var items []models.ExamTemplate
	err := s.db.Offset((page - 1) * pageSize).Limit(pageSize).Find(&items).Error
	return items, err
}

// BatchCreate 批量创建记录
func (s *ExamTemplateService) BatchCreate(items []models.ExamTemplate) ([]models.ExamTemplate, []error) {
	var errs []error
	var createdItems []models.ExamTemplate

	for _, item := range items {
		if err := s.db.Create(&item).Error; err != nil {
			errs = append(errs, err)
		} else {
			createdItems = append(createdItems, item)
		}
	}

	return createdItems, errs
}

// BatchUpdate 批量更新记录
func (s *ExamTemplateService) BatchUpdate(items []models.ExamTemplate) ([]models.ExamTemplate, []error) {
	var updatedItems []models.ExamTemplate
	var errs []error

	for _, item := range items {
		updateMap := make(map[string]interface{})
		if item.Id != nil {
			updateMap["id"] = *item.Id
		}
		if item.Title != nil {
			updateMap["title"] = *item.Title
		}
		if item.Description != nil {
			updateMap["description"] = *item.Description
		}
		if item.CoverImage != nil {
			updateMap["cover_image"] = *item.CoverImage
		}
		if item.TotalScore != nil {
			updateMap["total_score"] = *item.TotalScore
		}
		if item.Questions != nil {
			updateMap["questions"] = *item.Questions
		}
		if item.CategoryId != nil {
			updateMap["category_id"] = *item.CategoryId
		}
		if item.PublishTime != nil {
			updateMap["publish_time"] = *item.PublishTime
		}
		if item.Status != nil {
			updateMap["status"] = *item.Status
		}
		if item.Creator != nil {
			updateMap["creator"] = *item.Creator
		}
		if item.CreatedAt != nil {
			updateMap["created_at"] = *item.CreatedAt
		}
		if item.UpdatedAt != nil {
			updateMap["updated_at"] = *item.UpdatedAt
		}
		if item.DeletedAt != nil {
			updateMap["deleted_at"] = *item.DeletedAt
		}
		if item.TimeLimit != nil {
			updateMap["time_limit"] = *item.TimeLimit
		}
		if len(updateMap) > 0 {
			if err := s.db.Model(&models.ExamTemplate{}).Where("id = ?", *item.Id).Updates(updateMap).Error; err != nil {
				errs = append(errs, err)
				continue
			}
			var updatedItem models.ExamTemplate
			if err := s.db.First(&updatedItem, *item.Id).Error; err != nil {
				errs = append(errs, err)
				continue
			}
			updatedItems = append(updatedItems, updatedItem)
		}
	}
	return updatedItems, errs
}

// BatchDelete 批量删除记录
func (s *ExamTemplateService) BatchDelete(ids []uint) []error {
	var errs []error

	for _, id := range ids {
		if err := s.db.Delete(&models.ExamTemplate{}, id).Error; err != nil {
			errs = append(errs, err)
		}
	}

	return errs
}

func (s *ExamTemplateService) GetDB() *gorm.DB {
	return s.db
}

func (s *ExamTemplateService) GetDetail(id string) (*models.ExamTemplate, error) {
	var item models.ExamTemplate
	if err := s.db.First(&item, id).Error; err != nil {
		return nil, err
	}
	return &item, nil
}

func (s *ExamTemplateService) ListWithOrder(page, pageSize int, sort, order string) ([]*models.ExamTemplate, []error) {
	var items []*models.ExamTemplate
	db := s.db.Model(&models.ExamTemplate{})
	if sort == "" {
		sort = "id"
	}
	if order == "" {
		order = "desc"
	}
	db = db.Order(sort + " " + order)
	err := db.Offset((page-1)*pageSize).Limit(pageSize).Find(&items).Error
	if err != nil {
		return nil, []error{err}
	}
	return items, nil
}