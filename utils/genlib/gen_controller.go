 
package genlib

import (
	"fmt"
	"os"
	"strings"
	"text/template"
		"database/sql"
	meta "gin-go-test/utils/gen/meta"
)

// GenerateControllerWithAppend 路由追加版
func GenerateControllerWithAppend(tableName, moduleName string) error {
	tmplPath := "utils/gen/templates/controller.tpl"
	outputPath := fmt.Sprintf("app/controllers/%s_controller.go", strings.ToLower(tableName))

	controllerName := ToCamelCase(tableName)
	routePath := strings.ToLower(tableName)
	modelName := ToCamelCase(tableName)

	data := map[string]string{
		"ModuleName":     moduleName,
		"ControllerName": controllerName,
		"RoutePath":      routePath,
		"PackageName":    "controllers",
		"TableName":      tableName,
		"ModelName":      modelName,
	}

	tmpl, err := template.ParseFiles(tmplPath)
	if err != nil {
		return fmt.Errorf("加载模板失败: %v", err)
	}

	outFile, err := os.Create(outputPath)
	if err != nil {
		return fmt.Errorf("创建文件失败: %v", err)
	}
	defer outFile.Close()

	// 文件头部加自动生成注释
	outFile.WriteString("// Code generated by gen.go. DO NOT EDIT.\n")

	if err := tmpl.Execute(outFile, data); err != nil {
		return fmt.Errorf("渲染模板失败: %v", err)
	}

	fmt.Println("✅ 控制器及路由已生成到:", outputPath)
	fmt.Printf("🚀 路由访问示例: /api/%s/\n", routePath)
	return nil
}
// GenerateControllerSkeleton 生成控制器骨架（controller_skeleton）
func GenerateControllerSkeleton(db *sql.DB, tableName, moduleName string, overwrite bool) error {
	tmplPath := "utils/gen/templates/controller_skeleton.tpl"
	if err := os.MkdirAll("utils/generated/controller", os.ModePerm); err != nil {
		return fmt.Errorf("创建目录失败: %v", err)
	}
	outputPath := fmt.Sprintf("utils/generated/controller/%s_skeleton.go", strings.ToLower(tableName))

	controllerName := ToCamelCase(tableName)
	routePath := strings.ToLower(tableName)
	modelName := ToCamelCase(tableName)

	tablePrefix := os.Getenv("TABLE_PREFIX")
	fullTableName := tableName
	if tablePrefix != "" {
		fullTableName = tablePrefix + tableName
	}

	fields, err := meta.FetchTableFields(db, fullTableName)
	if err != nil {
		return fmt.Errorf("获取字段失败: %v", err)
	}

	data := struct {
		ModuleName     string
		ControllerName string
		RoutePath      string
		PackageName    string
		ModelName      string
		Fields         []meta.Field
	}{
		ModuleName:     moduleName,
		ControllerName: controllerName,
		RoutePath:      routePath,
		PackageName:    "skeleton",
		ModelName:      modelName,
		Fields:         fields,
	}

	// if _, err := os.Stat(outputPath); err == nil && !overwrite {
	// 	fmt.Println("⚠️ 控制器骨架已存在，跳过生成。")
	// 	return nil
	// }

	tmpl, err := template.ParseFiles(tmplPath)
	if err != nil {
		return fmt.Errorf("加载模板失败: %v", err)
	}

	outFile, err := os.Create(outputPath)
	if err != nil {
		return fmt.Errorf("创建文件失败: %v", err)
	}
	defer outFile.Close()

	if err := tmpl.Execute(outFile, data); err != nil {
		return fmt.Errorf("渲染模板失败: %v", err)
	}

	fmt.Println("✅ 控制器骨架已生成到:", outputPath)
	return nil
}