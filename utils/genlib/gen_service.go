package genlib

import (
	"database/sql"
	"fmt"
	"os"
	"path/filepath"
	"strings"
	"text/template"
	meta "gin-go-test/utils/gen/meta"
)

// ServiceTemplateData holds data passed to the service templates.
// ServiceName is the CamelCase version of the table name used for service naming.
// ModelName is the CamelCase version of the table name used for model struct naming.
// TableName is the original table name.
// RoutePath is the lowercase version of the table name used for route paths.
// Fields is a slice of Field structs representing the table's columns.
type ServiceTemplateData struct {
	ServiceName string
	ModelName   string
	TableName   string
	RoutePath   string
	Fields      []meta.Field
}

// ensureCommonFile ensures that the common.go file exists in the service package
func ensureCommonFile() error {
	commonPath := "utils/generated/service/common.go"
	if _, err := os.Stat(commonPath); os.IsNotExist(err) {
		// Create the directory if it doesn't exist
		if err := os.MkdirAll("utils/generated/service", os.ModePerm); err != nil {
			return fmt.Errorf("创建目录失败: %v", err)
		}

		// Create the common.go file
		commonContent := `package service

import (
	"fmt"
	"time"
)

// ErrorResponse 用于统一错误返回格式
type ErrorResponse struct {
	Code    int    ` + "`json:\"code\"`" + `
	Message string ` + "`json:\"message\"`" + `
	Details string ` + "`json:\"details,omitempty\"`" + `
	Time    string ` + "`json:\"timestamp\"`" + `
}

// NewErrorResponse 创建新的错误响应
func NewErrorResponse(code int, message string, details string) ErrorResponse {
	return ErrorResponse{
		Code:    code,
		Message: message,
		Details: details,
		Time:    time.Now().Format(time.RFC3339),
	}
}

// isZero 判断一个字段是否为零值
func isZero(v interface{}) bool {
	switch val := v.(type) {
	case string:
		return val == ""
	case int, int8, int16, int32, int64:
		return fmt.Sprintf("%v", val) == "0"
	case uint, uint8, uint16, uint32, uint64:
		return fmt.Sprintf("%v", val) == "0"
	case float32, float64:
		return fmt.Sprintf("%v", val) == "0" || fmt.Sprintf("%v", val) == "0.0"
	case bool:
		return !val
	case nil:
		return true
	default:
		return v == nil
	}
}`
		if err := os.WriteFile(commonPath, []byte(commonContent), 0644); err != nil {
			return fmt.Errorf("创建 common.go 失败: %v", err)
		}
		fmt.Println("✅ 创建 common.go 成功")
	}
	return nil
}

// cleanServiceSkeletonFiles removes the service skeleton file for the given table
func cleanServiceSkeletonFiles(tableName string) error {
	dir := "utils/generated/service"
	file := filepath.Join(dir, fmt.Sprintf("%s_service_skeleton.go", tableName))
	if err := os.Remove(file); err != nil {
		if os.IsNotExist(err) {
			return nil
		}
		return fmt.Errorf("删除文件失败 %s: %v", file, err)
	}
	fmt.Printf("🗑️ 已删除: %s\n", file)
	return nil
}

// GenerateServiceFromTable generates a service file from a table name.
// It converts tableName to CamelCase for both ServiceName and ModelName.
func GenerateServiceFromTable(tableName string) error {
	serviceName := toCamelCase(tableName)
	modelName := toCamelCase(tableName)
	routePath := strings.ToLower(tableName)

	// 新增：获取数据库连接和表字段
	db, err := meta.GetDBFromEnv()
	if err != nil {
		return fmt.Errorf("获取数据库连接失败: %v", err)
	}
	defer db.Close()

	// 自动读取表前缀
	tablePrefix := os.Getenv("TABLE_PREFIX")
	fullTableName := tableName
	if tablePrefix != "" {
		fullTableName = tablePrefix + tableName
	}

	fields, err := meta.FetchTableFields(db, fullTableName)
	if err != nil {
		return fmt.Errorf("获取表字段失败: %v", err)
	}

	data := ServiceTemplateData{
		ServiceName: serviceName,
		ModelName:   modelName,
		TableName:   tableName,
		RoutePath:   routePath,
		Fields:      fields, // 传递字段
	}

	tmpl, err := template.ParseFiles("utils/gen/templates/service.tpl")
	if err != nil {
		return fmt.Errorf("加载模板失败: %v", err)
	}

	outputPath := fmt.Sprintf("app/services/%s_service.go", tableName)
	if err := os.MkdirAll("app/services", os.ModePerm); err != nil {
		return err
	}

	outFile, err := os.Create(outputPath)
	if err != nil {
		return fmt.Errorf("创建服务文件失败: %v", err)
	}
	defer outFile.Close()

	// 文件头部加自动生成注释
	outFile.WriteString("// Code generated by gen.go. DO NOT EDIT.\n")

	if err := tmpl.Execute(outFile, data); err != nil {
		return fmt.Errorf("渲染模板失败: %v", err)
	}

	return nil
}

// GenerateServiceSkeleton generates a service skeleton file from a table name.
// It converts tableName to CamelCase for both ServiceName and ModelName.
func GenerateServiceSkeleton(db *sql.DB, tableName string, tmpl *template.Template) error {
	// 确保 common.go 存在
	if err := ensureCommonFile(); err != nil {
		return fmt.Errorf("确保 common.go 存在失败: %v", err)
	}

	// 清理现有的服务骨架文件
	if err := cleanServiceSkeletonFiles(tableName); err != nil {
		return fmt.Errorf("清理服务骨架文件失败: %v", err)
	}

	serviceName := toCamelCase(tableName)
	modelName := toCamelCase(tableName)

	// 读取前缀并拼接完整表名
	tablePrefix := os.Getenv("TABLE_PREFIX")
	fullTableName := tableName
	if tablePrefix != "" {
		fullTableName = tablePrefix + tableName
	}

	// 1. 获取字段信息
	fields, err := meta.FetchTableFields(db, fullTableName)
	if err != nil {
		return fmt.Errorf("❌ 获取字段信息失败: %v", err)
	}

	// 2. 校验至少有一个必填字段
	var primaryField string
	for _, f := range fields {
		if f.IsRequired {
			primaryField = f.Name
			break
		}
	}
	if primaryField == "" {
		fmt.Printf("⚠️ 警告：表 %s 没有任何必填字段，请为至少一个字段设置 NOT NULL\n", tableName)
		primaryField = "Id"
	}

	// 3. 组装模板数据
	data := map[string]interface{}{
		"ServiceName":  serviceName,
		"ModelName":    modelName,
		"PrimaryField": primaryField,
		"Fields":       fields,
	}

	outputPath := fmt.Sprintf("utils/generated/service/%s_service_skeleton.go", tableName)
	if err := os.MkdirAll("utils/generated/service", os.ModePerm); err != nil {
		return err
	}

	outFile, err := os.Create(outputPath)
	if err != nil {
		return fmt.Errorf("创建骨架文件失败: %v", err)
	}
	defer outFile.Close()

	if err := tmpl.Execute(outFile, data); err != nil {
		return fmt.Errorf("渲染骨架模板失败: %v", err)
	}

	return nil
}